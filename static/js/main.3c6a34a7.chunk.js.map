{"version":3,"sources":["store/todo-context.js","assets/icon-moon.svg","assets/icon-sun.svg","assets/icon-check.svg","components/UI/Checkbox.js","components/TodoForm/TodoForm.js","components/AllTodo/AllTodoFooter/AllTodoFooter.js","assets/icon-cross.svg","components/TodoItem/TodoItem.js","components/AllTodo/AllTodo.js","App.js","store/TodoProvider.js","index.js"],"names":["todoContext","createContext","todoList","show","clearCompleted","toggleTodoCompleted","id","deleteTodo","setShow","todoState","addTodo","todo","reorderList","dragDropResult","Checkbox","props","type","className","checked","onClick","checkboxHandler","src","checkIcon","alt","TodoForm","useState","isChecked","setCheckbox","invalidTodoContent","setInvalidTodoContent","todoContent","setTodoContent","todoCtx","useContext","onSubmit","event","preventDefault","content","isCompleted","prev","placeholder","maxLength","value","onChange","target","memo","AllTodoFooter","console","log","qty","showAll","showActive","showCompleted","TodoItem","draggableId","index","provided","snapshot","isDragging","draggableProps","dragHandleProps","ref","innerRef","bind","crossIcon","AllTodo","list","filter","item","length","onDragEnd","droppableId","droppableProps","map","isThemeDark","localStorage","getItem","App","isDark","updateTheme","useEffect","document","body","classList","add","setItem","remove","removeItem","sunIcon","moonIcon","genId","savedTodoList","JSON","parse","i","idGenerator","TodoProvider","updateList","updateShow","stringify","ctxValue","next","destination","source","destinationIndex","sourceIndex","reorderedList","splice","items","indexsInList","indexOf","forEach","indexInList","Provider","children","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3c6a34a7.chunk.js","sourcesContent":["import { createContext } from 'react'\n\nconst todoContext = createContext({\n  todoList: [],\n  show: 'ALL',\n  clearCompleted: () => {},\n  toggleTodoCompleted: id => {},\n  deleteTodo: id => {},\n  setShow: todoState => {},\n  addTodo: todo => {},\n  reorderList: dragDropResult => {},\n})\n\nexport default todoContext\n","export default __webpack_public_path__ + \"static/media/icon-moon.6c03114b.svg\";","export default __webpack_public_path__ + \"static/media/icon-sun.910b1f9a.svg\";","export default __webpack_public_path__ + \"static/media/icon-check.a8fb15d0.svg\";","import './Checkbox.css'\nimport checkIcon from '../../assets/icon-check.svg'\n\nfunction Checkbox(props) {\n  return (\n    <button type=\"button\" className={`checkbox ${props.checked && 'checked'}`} onClick={props.checkboxHandler}>\n      {props.checked && <img src={checkIcon} alt=\"Checked\" />}\n    </button>\n  )\n}\n\nexport default Checkbox\n","import { useState, useContext, memo } from 'react'\n\nimport todoContext from '../../store/todo-context'\nimport './TodoForm.css'\nimport Checkbox from '../UI/Checkbox'\n\nfunction TodoForm(props) {\n  const [isChecked, setCheckbox] = useState(false)\n  const [invalidTodoContent, setInvalidTodoContent] = useState(false)\n  const [todoContent, setTodoContent] = useState('')\n  const todoCtx = useContext(todoContext)\n\n  const submitHandler = event => {\n    event.preventDefault()\n    if(todoContent === '') return setInvalidTodoContent(true)\n    todoCtx.addTodo({content: todoContent, isCompleted: isChecked})\n    setInvalidTodoContent(false)\n    setTodoContent('')\n  }\n\n  return (\n    <form\n      className={`todo_form ${invalidTodoContent && 'invalid'}`}\n      onSubmit={submitHandler}\n    >\n      <Checkbox\n        checked={isChecked}\n        checkboxHandler={() => setCheckbox(prev => !prev)}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Create a new todo...\"\n        maxLength=\"60\"\n        value={todoContent}\n        onChange={event => setTodoContent(event.target.value)}\n      />\n    </form>\n  )\n}\n\nexport default memo(TodoForm)\n","import './AllTodoFooter.css'\n\nfunction AllTodoFooter(props) {\n  console.log(props.qty)\n  return (\n    <footer className=\"all_todo__footer\">\n      <p>{props.qty} items left</p>\n      <nav>\n        <button\n          className={`nav_button ${props.show === 'ALL' && 'active'}`}\n          onClick={props.showAll}\n        >\n          All\n        </button>\n        <button\n          className={`nav_button ${props.show === 'ACTIVE' && 'active'}`}\n          onClick={props.showActive}\n        >\n          Active\n        </button>\n        <button\n          className={`nav_button ${props.show === 'COMPLETED' && 'active'}`}\n          onClick={props.showCompleted}\n        >\n          Completed\n        </button>\n      </nav>\n      <button className=\"clear_button\" onClick={props.clearCompleted}>\n        Clear Completed\n      </button>\n    </footer>\n  )\n}\n\nexport default AllTodoFooter\n","export default __webpack_public_path__ + \"static/media/icon-cross.6ee81d30.svg\";","import { useContext } from 'react'\nimport { Draggable } from 'react-beautiful-dnd'\n\nimport todoContext from '../../store/todo-context'\nimport './TodoItem.css'\nimport crossIcon from '../../assets/icon-cross.svg'\nimport Checkbox from '../UI/Checkbox'\n\nfunction TodoItem(props) {\n  const todoCtx = useContext(todoContext)\n\n  const toggleTodoCompleted = () => todoCtx.toggleTodoCompleted(props.id)\n\n  return (\n    <Draggable draggableId={props.id} index={props.index} key={props.id}>\n      {(provided, snapshot) => (\n        <li\n          className={`todo_item ${snapshot.isDragging && 'dragging'}`}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          ref={provided.innerRef}\n        >\n          <div className={`todo ${props.isCompleted && 'completed'}`}>\n            <Checkbox\n              checked={props.isCompleted}\n              checkboxHandler={toggleTodoCompleted}\n            />\n            <h1 onClick={toggleTodoCompleted}>{props.content}</h1>\n          </div>\n          <button\n            className=\"delete_todo\"\n            onClick={todoCtx.deleteTodo.bind(null, props.id)}\n          >\n            <img src={crossIcon} alt=\"Delete\" />\n          </button>\n        </li>\n      )}\n    </Draggable>\n  )\n}\n\nexport default TodoItem\n","import { useContext, memo } from 'react'\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd'\n\nimport todoContext from '../../store/todo-context'\nimport './AllTodo.css'\nimport AllTodoFooter from './AllTodoFooter/AllTodoFooter'\nimport TodoItem from '../TodoItem/TodoItem'\n\nfunction AllTodo(props) {\n  const todoCtx = useContext(todoContext)\n\n  let list = todoCtx.todoList\n  if (todoCtx.show !== 'ALL') {\n    list = list.filter(item =>\n      todoCtx.show === 'ACTIVE' ? !item.isCompleted : item.isCompleted\n    )\n  }\n\n  if (todoCtx.todoList.length === 0) {\n    return <h1 className=\"empty_list\">Empty List</h1>\n  }\n  return (\n    <section className=\"all_todo\">\n      <DragDropContext onDragEnd={todoCtx.reorderList}>\n        <Droppable droppableId=\"todo-list\">\n          {provided => (\n            <ul {...provided.droppableProps} ref={provided.innerRef}>\n              {list.map((todo, index) => (\n                <TodoItem\n                  content={todo.content}\n                  id={todo.id}\n                  isCompleted={todo.isCompleted}\n                  key={todo.id}\n                  index={index}\n                />\n              ))}\n              {provided.placeholder}\n            </ul>\n          )}\n        </Droppable>\n      </DragDropContext>\n      <AllTodoFooter\n        qty={todoCtx.todoList.filter(item => !item.isCompleted).length}\n        show={todoCtx.show}\n        showAll={todoCtx.setShow.bind(null, 'ALL')}\n        showActive={todoCtx.setShow.bind(null, 'ACTIVE')}\n        showCompleted={todoCtx.setShow.bind(null, 'COMPLETED')}\n        clearCompleted={todoCtx.clearCompleted}\n      />\n    </section>\n  )\n}\n\nexport default memo(AllTodo)\n","import { useEffect, useState, useContext } from 'react'\n\nimport todoContext from './store/todo-context'\nimport './App.css'\nimport moonIcon from './assets/icon-moon.svg'\nimport sunIcon from './assets/icon-sun.svg'\nimport TodoForm from './components/TodoForm/TodoForm'\nimport AllTodo from './components/AllTodo/AllTodo'\n\nconst isThemeDark = localStorage.getItem('isDark')\n\nfunction App() {\n  const [isDark, updateTheme] = useState(isThemeDark)\n  const todoCtx = useContext(todoContext)\n\n  useEffect(() => {\n    if (isDark) {\n      document.body.classList.add('dark')\n      localStorage.setItem('isDark', true)\n    } else {\n      document.body.classList.remove('dark')\n      localStorage.removeItem('isDark')\n    }\n  }, [isDark])\n\n  const toggleThemeHandler = () => updateTheme(prev => !prev)\n\n  return (\n    <div className=\"container\">\n      <header>\n        <h1>TODO</h1>\n        <button className=\"theme_toggle\" onClick={toggleThemeHandler}>\n          <img src={isDark ? sunIcon : moonIcon} alt=\"Change Theme\" />\n        </button>\n      </header>\n      <TodoForm />\n      <AllTodo />\n      {todoCtx.todoList.length !== 0 && (\n        <p className=\"info\">Drag and drop to reorder list</p>\n      )}\n    </div>\n  )\n}\n\nexport default App\n","import { useState, useEffect } from 'react'\n\nimport todoContext from './todo-context'\n\nconst savedTodoList = JSON.parse(localStorage.getItem('todoList'))\n\nfunction* genId() {\n  let i = savedTodoList ? savedTodoList.length + 1 : 1\n  while (true) {\n    yield `todo-${i}`\n    i++\n  }\n}\nconst idGenerator = genId()\n\n\nfunction reorderList(list, show, destinationIndex, sourceIndex){\n  const reorderedList = [...list]\n  if (show === 'ALL') {\n    const [item] = reorderedList.splice(sourceIndex, 1)\n    reorderedList.splice(destinationIndex, 0, item)\n  } else {\n    const items = list.filter(item =>\n      show === 'COMPLETED' ? item.isCompleted : !item.isCompleted\n    )\n    const indexsInList = items.map(item => list.indexOf(item))\n    const [item] = items.splice(sourceIndex, 1)\n    items.splice(destinationIndex, 0, item)\n    indexsInList.forEach((indexInList, i) =>\n      reorderedList.splice(indexInList, 1, items[i])\n    )\n  }\n  return reorderedList\n}\n\n\nfunction TodoProvider(props) {\n  const [todoList, updateList] = useState(savedTodoList || [])\n  const [show, updateShow] = useState('ALL')\n\n  useEffect(() => {\n    localStorage.removeItem('todoList')\n    if(todoList.length > 0){\n      localStorage.setItem('todoList', JSON.stringify(todoList))\n    }\n  }, [todoList])\n\n  const toggleTodoCompletedHandler = id => {\n    updateList(prev =>\n      prev.map(item => {\n        if (item.id === id) item.isCompleted = !item.isCompleted\n        return item\n      })\n    )\n  }\n  const addTodoHandler = todo =>\n    updateList(prev => [...prev, { ...todo, id: idGenerator.next().value }])\n\n  const deteleTodoHandler = id =>\n    updateList(prev => prev.filter(item => item.id !== id))\n\n  const clearCompletedHandler = () =>\n    updateList(prev => prev.filter(item => !item.isCompleted))\n\n  const updateShowHandler = todoState => updateShow(todoState)\n\n  const reorderListHandler = dragDropResult => {\n    const { destination, source } = dragDropResult\n    if (destination) {\n      updateList(prev => reorderList(prev, show, destination.index, source.index))\n    }\n  }\n\n  const ctxValue = {\n    todoList,\n    show,\n    clearCompleted: clearCompletedHandler,\n    toggleTodoCompleted: toggleTodoCompletedHandler,\n    setShow: updateShowHandler,\n    addTodo: addTodoHandler,\n    deleteTodo: deteleTodoHandler,\n    reorderList: reorderListHandler,\n  }\n\n  return (\n    <todoContext.Provider value={ctxValue}>\n      {props.children}\n    </todoContext.Provider>\n  )\n}\n\nexport default TodoProvider\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nimport TodoProvider from './store/TodoProvider'\n\nReactDOM.render(\n  <TodoProvider>\n    <App />\n  </TodoProvider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}